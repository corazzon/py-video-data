[
    {
        "index": 1,
        "title": "Miro Hrončok: #! BANG, BANG!",
        "url": "https://www.youtube.com/watch?v=XHfCXit51s4",
        "video_id": "XHfCXit51s4",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1546,
        "view_count": 217,
        "like_count": 4,
        "comment_count": null,
        "tags": [
            "PyCon",
            "PyCon CZ 2019",
            "pyconcz",
            "python",
            "talk",
            "pycon",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "Shebang, hashbang, shabang, poundbang, hashpling. Ever seen one?\n\n#!/usr/bin/env python\n\nYour editor probably magically adds it there. Do you need it? How do you use it? What is it for? How does it work? This will be an introductory level talk. I’ll talk about the history of shebangs, about problems shebangs are trying to solve, new challenges they bring and why you should not use them directly. I'll talk about execution, permissions, PATH, Linux distro packaging, entrypoints, emojis, crazy autotools templates, cool shebangs and the shortest script that deletes itself.\n\nhttps://cz.pycon.org/2019/programme/talks/11/",
        "thumbnail": "https://i.ytimg.com/vi/XHfCXit51s4/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=XHfCXit51s4",
        "original_url": "https://www.youtube.com/watch?v=XHfCXit51s4"
    },
    {
        "index": 2,
        "title": "Jackie Kazil: Parallels Between Career Building and Home Remodeling",
        "url": "https://www.youtube.com/watch?v=Dws3yY2dliA",
        "video_id": "Dws3yY2dliA",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 2511,
        "view_count": 58,
        "like_count": 0,
        "comment_count": null,
        "tags": [
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "Ten years ago, I had a five year plan. A plan to fix an eighty‑year‑old house in Washington, DC. That five year plan turned into the ten year plan. During those ten years, I went from working as a data journalist at The Washington Post, to working as a software engineer for the Library of Congress, to being a Presidential Innovations Fellow for The White House under the appointment of President Obama. I wrote a book for O’Reilly Media, I am “completing” a Ph.D, I created the leading library in my field in Python, and I started a family, giving birth to the keynote speaker for PyCon CZ 2042. In the past, if you had asked me how I did all of these things, I wouldn’t have had a sufficient answer. It wasn’t until I was able to reflect back upon the remodeling of that house, that I truly began to understand my accomplishments. In this talk, I’ll impart the lessons that I learned in that house remodeling, and the interesting way in which they apply to software development and my career.",
        "thumbnail": "https://i.ytimg.com/vi/Dws3yY2dliA/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Dws3yY2dliA",
        "original_url": "https://www.youtube.com/watch?v=Dws3yY2dliA"
    },
    {
        "index": 3,
        "title": "Petr Simecek: Time Series Forecasting in Python",
        "url": "https://www.youtube.com/watch?v=pQJmCro_P0A",
        "video_id": "pQJmCro_P0A",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1482,
        "view_count": 207,
        "like_count": 4,
        "comment_count": null,
        "tags": [
            "python",
            "pyconcz",
            "talk",
            "pycon",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "This talk should give you a high-level introduction to time series forecasting in Python. In particular, I want to focus on differences between classical statistical approaches (exponential smoothing, ARIMA…) and more recent machine learning methods (neural networks). I will also describe the history of M1-M4 time series forecasting competitions and provide examples on public Kaggle datasets. How is it possible that deep neural networks are superior on one type of data while for a different dataset they give forecast so poor that prof. Makridakis summarized his findings (Makridakis et al., Plos One, 2018) as follows: “The forecasting accuracy of the best ML method was lower than the worst of Stat ones while half the ML methods were less accurate than a random walk.” In the end, I will provide some hints of which method is likely to work best for your data.",
        "thumbnail": "https://i.ytimg.com/vi/pQJmCro_P0A/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=pQJmCro_P0A",
        "original_url": "https://www.youtube.com/watch?v=pQJmCro_P0A"
    },
    {
        "index": 4,
        "title": "Tania Allard: Jupyter notebooks: Friends or foes?",
        "url": "https://www.youtube.com/watch?v=tZfhhdiwZ8c",
        "video_id": "tZfhhdiwZ8c",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1658,
        "view_count": 87,
        "like_count": 2,
        "comment_count": null,
        "tags": [
            "pycon",
            "python",
            "talk",
            "pyconcz",
            "jupyter",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "Jupyter notebooks have become a hugely popular tool in research, machine learning, data science, education, and many many areas. Their use and adoption have opened the door to a new paradigm: the emergence of literate programming. And with this new paradigm, the users are not only able to develop quick prototypes but also generate compelling narratives in which the code and its outputs are presented side by side. Hence why big companies such as Google and Microsoft have created their own ports of the notebooks: Google Colab and Azure Notebooks. But how well do notebooks perform in different contexts and standards? Are these suitable for all audiences and applications? This talk will dive into some of the best and lesser known features of the Jupyter notebooks and tools within the Jupyter ecosystem. At the same time, we will explore the limitations and ‘odd behaviors’ of notebooks in a number of contexts while exploring the boundaries of the notebooks and their usefulness under such circumstances. This talk is suitable for anyone interested in using Jupyter notebooks as part of their workflows as well as for anyone interested in learning ‘what the fuzz is about’ the Jupyter ecosystem. There are no hard technical requirements.",
        "thumbnail": "https://i.ytimg.com/vi/tZfhhdiwZ8c/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=tZfhhdiwZ8c",
        "original_url": "https://www.youtube.com/watch?v=tZfhhdiwZ8c"
    },
    {
        "index": 5,
        "title": "Gabriel Bianconi: Face Processing with Computer Vision",
        "url": "https://www.youtube.com/watch?v=CEiDbcB1Fqw",
        "video_id": "CEiDbcB1Fqw",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1400,
        "view_count": 197,
        "like_count": 3,
        "comment_count": null,
        "tags": [
            "python",
            "pyconcz",
            "talk",
            "pycon",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "Ever wonder how Facebook’s facial recognition or Snapchat’s filters work? Faces are a fundamental piece of photography, and building applications around them have never been easier with open-source libraries and pre-trained models. In this talk, I’ll help you understand some of the computer vision and machine learning techniques behind these applications. Then, we’ll use this knowledge to develop our own prototypes to tackle tasks such as face detection (e.g. digital cameras), recognition (e.g. Facebook Photos), classification (e.g. identifying emotions), manipulation (e.g. Snapchat filters), and more.",
        "thumbnail": "https://i.ytimg.com/vi/CEiDbcB1Fqw/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=CEiDbcB1Fqw",
        "original_url": "https://www.youtube.com/watch?v=CEiDbcB1Fqw"
    },
    {
        "index": 6,
        "title": "Karla Fejfar­ová: Of Mice and Men and Python",
        "url": "https://www.youtube.com/watch?v=WUHkB-jDgaE",
        "video_id": "WUHkB-jDgaE",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 2239,
        "view_count": 73,
        "like_count": 2,
        "comment_count": null,
        "tags": [
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "The human genome is sequenced, yet we still don't know what all of the genes do. Which of the genes are related to conditions like asthma, cancer or blindness? What effects do small variations in the genome have on our health? While we cannot change our DNA to analyze these effects, we can change the genes of mice. At the genetic level, humans and mice are similar and many of disease-related genes are identical. Thanks to genetically manipulated mice, we can study mechanisms of diseases and design effective treatments. After the genetically manipulated mice have been created, researches must examine all measurable traits, including metabolism, bone development, and behaviour. The measurements then have to be compared with the characteristics of the wild-type mice (mice that have not been genetically altered). This means a lot of data are generated every day. The data can come not only as numbers or categories but also in the form of images. I will give you a short tour of the Czech Centre for Phenogenomics in the BIOCEV centre in Vestec and a brief overview of current research in mouse-based functional genomics. I'll also present various types of data we generate during the research and I will show you how Python helps us to overcome some of the everyday challenges we face.",
        "thumbnail": "https://i.ytimg.com/vi/WUHkB-jDgaE/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=WUHkB-jDgaE",
        "original_url": "https://www.youtube.com/watch?v=WUHkB-jDgaE"
    },
    {
        "index": 7,
        "title": "Petr Viktorin: Building an async event loop",
        "url": "https://www.youtube.com/watch?v=CRPnkTv1phs",
        "video_id": "CRPnkTv1phs",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1696,
        "view_count": 4287,
        "like_count": 125,
        "comment_count": 6,
        "tags": [
            "python",
            "talk",
            "pyconcz",
            "pycon",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "Using an event loop (with frameworks like asyncio and trio for network services, or PyQt or GTK for GUI applications) is not that hard once you “get” the concept, but it does take some time and thought to get to that point. The usual async tutorials focus on how to use it and what you can do. This session explores a different angle: I'll build an event loop and a time-based scheduler from scratch, explaining the concept on actual code. This is a live coding session and isn't suitable for beginners. To follow along, you will need some experience reading (and writing) classes, functions and loops.",
        "thumbnail": "https://i.ytimg.com/vi/CRPnkTv1phs/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=CRPnkTv1phs",
        "original_url": "https://www.youtube.com/watch?v=CRPnkTv1phs"
    },
    {
        "index": 8,
        "title": "Miloslav Pojman: Iterators for Curious Minds",
        "url": "https://www.youtube.com/watch?v=UKthWrYmhII",
        "video_id": "UKthWrYmhII",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1824,
        "view_count": 158,
        "like_count": 8,
        "comment_count": 1,
        "tags": [
            "pycon",
            "talk",
            "pyconcz",
            "python",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "Do you know the difference between iterators and iterables? Are you able to implement a custom collection? Why something so basic as a for-loop got its chapter in the famous Gang of Four book? The iterator protocol is a prime example of Python language design. I will not only show how to implement custom iterators but also illustrate how other Python features are provided using similar idioms. I will informally introduce the iterator design pattern and show how it is built into the language. After mentioning some examples of iterables, we will look into Python data model, implement some generators, and maybe touch async frameworks.",
        "thumbnail": "https://i.ytimg.com/vi/UKthWrYmhII/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=UKthWrYmhII",
        "original_url": "https://www.youtube.com/watch?v=UKthWrYmhII"
    },
    {
        "index": 9,
        "title": "Flavio Percoco: Inheriting code, and I don’t mean classes",
        "url": "https://www.youtube.com/watch?v=HX3HSmwWm2U",
        "video_id": "HX3HSmwWm2U",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1811,
        "view_count": 132,
        "like_count": 2,
        "comment_count": null,
        "tags": [
            "pycon",
            "python",
            "pyconcz",
            "talk",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "One of the hardest things to do for developers, especially freelancers, is to inherit someone else’s code. Let alone doing it when the original author is not around anymore. Whether it’s an open source project, an internal project, or some small web page that your best friend asked you to fix. Code that has not been written by us is always ugly, not performant, and broken.\nHow does one go about inheriting other people's code?\nHow do you wrap your head around the (wrong?) ideas, the (flawed?) logic, and the (lack of?) taste of * other developers(?)?\nHow can you take such code, make it yours, make it better, and sprinkle your fairy dust all over it? Also, do you really write better code? ;)\nJoin me while I share some of my experience on this topic, some strategies to inherit old code without (totally) going mental, and how to rant about it without looking like a douchebag.",
        "thumbnail": "https://i.ytimg.com/vi/HX3HSmwWm2U/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=HX3HSmwWm2U",
        "original_url": "https://www.youtube.com/watch?v=HX3HSmwWm2U"
    },
    {
        "index": 10,
        "title": "Marcel Plch: What are CPython's sub­inter­preters?",
        "url": "https://www.youtube.com/watch?v=ZsBqkvMud5M",
        "video_id": "ZsBqkvMud5M",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1095,
        "view_count": 357,
        "like_count": 7,
        "comment_count": null,
        "tags": [
            "pycon",
            "pyconcz",
            "talk",
            "python",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "The Python interpreter exposes a rich C API that allows you to extend or embed it with a fast C code. This includes subinterpreters, which allow you the have (almost) separated environment for each interpreter inside a single process. With these separated environments, you may have multiple Python applications running in a single process. If many instances are required to be launched, this may have significant both memory and performance benefits. However, there are multiple ways to break the behavior of subinterpreters and even some extensions from the standard library are not subinterpreter-safe. Let’s have a look at the ways subinterpreters are useful and what could make them better in the future.",
        "thumbnail": "https://i.ytimg.com/vi/ZsBqkvMud5M/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ZsBqkvMud5M",
        "original_url": "https://www.youtube.com/watch?v=ZsBqkvMud5M"
    },
    {
        "index": 11,
        "title": "Tomáš Vondra: PostgreSQL vs. data corruption",
        "url": "https://www.youtube.com/watch?v=SgPQZWCj48k",
        "video_id": "SgPQZWCj48k",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 2238,
        "view_count": 191,
        "like_count": 2,
        "comment_count": null,
        "tags": [
            "pycon",
            "pyconcz",
            "talk",
            "PostgreSQL",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "Data corruption is a major issue in databases, particularly in large and old ones, and tackling it may be surprisingly difficult. In this talk I’ll discuss where data corruption comes from – why and how does it happen, and what can we do to deal with it. Either by implementing new features in the database system, configuring it properly, using the right hardware, and various other means. I’m a PostgreSQL developer and contributor, so I’ll focus on data corruption issues in this database system. But while I plan to discuss a number of PostgreSQL-specific examples, data corruption is a generic issue that applies to most regular databases. So hopefully the conclusions of the talk can be helpful for users of other databases.",
        "thumbnail": "https://i.ytimg.com/vi/SgPQZWCj48k/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=SgPQZWCj48k",
        "original_url": "https://www.youtube.com/watch?v=SgPQZWCj48k"
    },
    {
        "index": 12,
        "title": "Dariusz Aniszewski: Git under the hood",
        "url": "https://www.youtube.com/watch?v=3g8thwJnDF8",
        "video_id": "3g8thwJnDF8",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1943,
        "view_count": 116,
        "like_count": 3,
        "comment_count": null,
        "tags": [
            "pycon",
            "talk",
            "pyconcz",
            "git",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "You know what git is. You most likely use it on a daily basis. You know how to create a branch and push changes to a remote. No questions asked. But do you really know what’s going on when you git commit? How is the hash calculated and what does it mean that branches have been merged? Should you be worried by a detached HEAD? In my talk, I want to explain how a Git repo is made, what it contains and how it stores data. I will show, step by step, what is happening under the hood in a typical Git flow you do every day.",
        "thumbnail": "https://i.ytimg.com/vi/3g8thwJnDF8/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=3g8thwJnDF8",
        "original_url": "https://www.youtube.com/watch?v=3g8thwJnDF8"
    },
    {
        "index": 13,
        "title": "Vojta Filipec: Curious about a new place? Get there via Open­Street­Maps API",
        "url": "https://www.youtube.com/watch?v=y0MtVOjuXPQ",
        "video_id": "y0MtVOjuXPQ",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 2052,
        "view_count": 32,
        "like_count": 0,
        "comment_count": null,
        "tags": [
            "pycon",
            "talk",
            "python",
            "pyconcz",
            "openstreetmap",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "For many companies, getting known a location where customers live or work is important as it helps to understand the customers better. Knowledge of the neighborhoods may identify deficient services to a marketing company: Would you offer an online librarian service to someone who lives next to a public library?; it may also approximate the wealth of the customer: Are there villas or block-of-flats nearby?; an urban development initiative can use it to rigorously compare civil services across multiple districts. Finally it enables you to address your spouse's inquiry: On our day-trip, is there any Thai restaurant which opens on Sundays and has a children playground within a 200 m radius? To answer the above questions you need a rich source of data with decent API. OpenStreetMaps offer both. This talk explains how to access the data points in OSM and how to query their labels and content. It will introduce two Python libraries (overpass and overpy) and the underlying OSM query language, which jointly allow you to search and extract whatever information you might be interested in.",
        "thumbnail": "https://i.ytimg.com/vi/y0MtVOjuXPQ/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=y0MtVOjuXPQ",
        "original_url": "https://www.youtube.com/watch?v=y0MtVOjuXPQ"
    },
    {
        "index": 14,
        "title": "Angelina Nikiforova: Keep formatting consistent with Black",
        "url": "https://www.youtube.com/watch?v=gGXQKcb0iys",
        "video_id": "gGXQKcb0iys",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1252,
        "view_count": 63,
        "like_count": 0,
        "comment_count": null,
        "tags": [
            "pyconcz",
            "pycon",
            "python",
            "talk",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "How many times have you seen or even made comments to the pull requests regarding formatting? Getting such reviews is pretty annoying, as well as making them. We are trying to get rid of this using this amazing Black formatter that forces formatting standards for every committer to the repository. In this talk, I will explain how to work with it and setup pre-commit hooks, so you can’t even push the code Black complains about. (Well, of course you can.)",
        "thumbnail": "https://i.ytimg.com/vi/gGXQKcb0iys/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=gGXQKcb0iys",
        "original_url": "https://www.youtube.com/watch?v=gGXQKcb0iys"
    },
    {
        "index": 15,
        "title": "Juha-Matti Santala: I teach, therefore I learn",
        "url": "https://www.youtube.com/watch?v=8L5ChGlW-uE",
        "video_id": "8L5ChGlW-uE",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1818,
        "view_count": 138,
        "like_count": 0,
        "comment_count": null,
        "tags": [
            "talk",
            "pyconcz",
            "pycon",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "There are many ways to improve your skills as a developer. Teaching programming is an awesome but bit under-appreciated one. Becoming a senior developer is about so much more than just technical competency. It’s about helping others succeed, it’s about becoming a leader and it’s about being a good communicator with users, clients and teammates. In this talk, I will share how 6+ years of programming teaching has made me a better developer in the core understanding of topics, communication, and perspective as well as reveal all the additional perks of joy, diversity, and making friends.",
        "thumbnail": "https://i.ytimg.com/vi/8L5ChGlW-uE/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=8L5ChGlW-uE",
        "original_url": "https://www.youtube.com/watch?v=8L5ChGlW-uE"
    },
    {
        "index": 16,
        "title": "Anastázie Sedláková: Mindful learning",
        "url": "https://www.youtube.com/watch?v=8_MYubUCpec",
        "video_id": "8_MYubUCpec",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 881,
        "view_count": 97,
        "like_count": 0,
        "comment_count": null,
        "tags": [
            "pycon",
            "pyconcz",
            "talk",
            "learning",
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "Nowadays, we hear from all the places that we need to push ourselves hard to achieve something. Especially when learning something new and complex, like programming. After teaching dozens of people to program and after having switched career myself (from a geneticist to a data scientist), I think quite the opposite. The more you are connected to yourself, the more successful you are in learning. In my talk, I will share tips on how to learn efficiently. Key of the whole process is to reduce stress. It improves performance and makes learning more fun.",
        "thumbnail": "https://i.ytimg.com/vi/8_MYubUCpec/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=8_MYubUCpec",
        "original_url": "https://www.youtube.com/watch?v=8_MYubUCpec"
    },
    {
        "index": 17,
        "title": "Jakub Langr:  The theory and practice of Generative Adversarial Networks",
        "url": "https://www.youtube.com/watch?v=qSCvMKf_25o",
        "video_id": "qSCvMKf_25o",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1654,
        "view_count": 201,
        "like_count": 0,
        "comment_count": null,
        "tags": [
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "Until recently, generative modelling of any kind has had limited success. But now that Generative Adversarial Networks (GANs) have recently reached few tremendous milestones (and truly exponential growth in the interest in this technology), we are now closer to a general purpose framework for generating new data. Now GANs can achieve a variety of applications such as synthesising full-HD synthetic faces, to semi-supervised learning as well as defending and mastering adversarial examples, we can discuss them in this talk. In this talk, we will start with the basics of generative models, but eventually we will explore the state of the art in generating full-HD images and dive into adversarial attacks and why this matters to all computer vision algorithms. GANs are a novel approach to generating new data or on a variety of adjacent problems that leverages the power of deep learning and two competing agents to achieve breath-taking results.",
        "thumbnail": "https://i.ytimg.com/vi/qSCvMKf_25o/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=qSCvMKf_25o",
        "original_url": "https://www.youtube.com/watch?v=qSCvMKf_25o"
    },
    {
        "index": 18,
        "title": "Pavel Šimerda: Debugging binaries with Python",
        "url": "https://www.youtube.com/watch?v=evC2aVcFPnA",
        "video_id": "evC2aVcFPnA",
        "uploader": "PyCon CZ",
        "uploader_id": "@PyConCZ",
        "uploader_url": "https://www.youtube.com/@PyConCZ",
        "upload_date": "20210523",
        "duration": 1652,
        "view_count": 173,
        "like_count": 1,
        "comment_count": null,
        "tags": [
            "PyCon CZ",
            "PyConCZ"
        ],
        "categories": [
            "Science & Technology"
        ],
        "description": "",
        "thumbnail": "https://i.ytimg.com/vi/evC2aVcFPnA/sddefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=evC2aVcFPnA",
        "original_url": "https://www.youtube.com/watch?v=evC2aVcFPnA"
    }
]